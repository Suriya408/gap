name: CI/CD to Minikube on EC2

on: workflow_dispatch


jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: Kubernetes Environment

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ vars.DOCKER_USERNAME }}" --password-stdin
      - name: Build and Push image
        run: |
          chmod 777 mvnw
          ./mvnw clean install
          IMAGE_NAME=${{ vars.DOCKER_USERNAME }}/gap:latest
          docker build -t "$IMAGE_NAME" -f Dockerfile .
          docker push "$IMAGE_NAME"
      - name: Deploy to Minikube on EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ vars.EC2_HOST }}
          username: ${{ vars.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            set -euo pipefail
            if [ ! -d "$HOME/gap" ]; then
              git clone https://github.com/Suriya408/gap "$HOME/gap"
            fi
            cd "$HOME/gap"
            git pull origin main
            # Ensure Minikube is running
            if ! minikube status >/dev/null 2>&1; then
                minikube start --driver=docker
            fi
          
            kubectl delete secret docker-secret --ignore-not-found
            kubectl create secret docker-registry docker-secret \
              --docker-username='${{ vars.DOCKER_USERNAME }}' \
              --docker-password='${{ secrets.DOCKER_PASSWORD }}' \
              --docker-email='${{ vars.DOCKER_EMAIL }}'
            if grep -qE 'image:\s' deployment.yml; then
              sed -i "s|image:\s*.*|image: ${{ vars.DOCKER_USERNAME }}/banking:latest|g" deployment.yml
            else
              sed -i "/name:\s*getting-started-app/a \ \ \ \ \ \ \ \ image: ${{ vars.DOCKER_USERNAME }}/banking:latest" deployment.yml
            fi
            if ! grep -q "imagePullSecrets:" deployment.yml; then
              awk '
                /spec:/ && inTplSpec==0 {print; next}
                /template:/ {print; next}
                /spec:/ && prevWasTemplate {print; print "      imagePullSecrets:\n        - name: docker-secret"; inTplSpec=1; prevWasTemplate=0; next}
                {print}
                {prevWasTemplate = ($0 ~ /template:/)}
              ' deployment.yml > deployment.tmp || true
              if [ -s deployment.tmp ]; then mv deployment.tmp deployment.yml; fi
            fi
            if ! grep -q "imagePullPolicy:" deployment.yml; then
              sed -i "/image:\s*${{ vars.DOCKER_USERNAME }}\/getting-started-app:latest/a \ \ \ \ \ \ \ \ imagePullPolicy: Always" deployment.yml
            else
              sed -i "s|imagePullPolicy:\s*.*|imagePullPolicy: Always|g" deployment.yml
            fi
            kubectl apply -f deployment.yml
            kubectl apply -f service.yml
            kubectl rollout status deployment/getting-started-app --timeout=120s
